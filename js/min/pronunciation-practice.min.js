class PronunciationPractice{constructor(t){this.container=document.getElementById(t),this.recognition=null,this.synthesis=window.speechSynthesis,this.currentPhrase=null,this.practiceData=[],this.score=0,this.attempts=0,this.isListening=!1,this.selectedLevel="beginner",this.selectedCategory="all",this.initializeSpeechRecognition(),this.loadPracticeData(),this.render(),this.attachEventListeners()}initializeSpeechRecognition(){const t=window.SpeechRecognition||window.webkitSpeechRecognition;t?(this.recognition=new t,this.recognition.lang="ja-JP",this.recognition.continuous=!1,this.recognition.interimResults=!0,this.recognition.maxAlternatives=3,this.recognition.onstart=()=>{this.isListening=!0,this.updateUI()},this.recognition.onend=()=>{this.isListening=!1,this.updateUI()},this.recognition.onresult=t=>{this.handleRecognitionResult(t)},this.recognition.onerror=t=>{this.handleRecognitionError(t)}):this.showError("お使いのブラウザは音声認識に対応していません。ChromeまたはEdgeをご利用ください。")}async loadPracticeData(){try{const t=await fetch("/data/pronunciation-practice-data.json"),e=await t.json();this.practiceData=e.phrases,this.selectRandomPhrase()}catch(t){console.error("練習データの読み込みに失敗しました:",t),this.showError("練習データの読み込みに失敗しました。")}}selectRandomPhrase(){const t=this.practiceData.filter(t=>{const e="all"===this.selectedLevel||t.level===this.selectedLevel,s="all"===this.selectedCategory||t.category===this.selectedCategory;return e&&s});if(0===t.length)return void this.showError("該当する練習フレーズがありません。");const e=Math.floor(Math.random()*t.length);this.currentPhrase=t[e],this.updatePhraseDisplay()}updatePhraseDisplay(){const t=this.container.querySelector(".phrase-display");t&&this.currentPhrase&&(t.innerHTML=`\n                <div class="phrase-text">${this.currentPhrase.text}</div>\n                <div class="phrase-reading">${this.currentPhrase.reading}</div>\n                <div class="phrase-context">${this.currentPhrase.context}</div>\n                <div class="phrase-level">レベル: ${this.getLevelLabel(this.currentPhrase.level)}</div>\n            `)}getLevelLabel(t){return{beginner:"初級",intermediate:"中級",advanced:"上級"}[t]||t}handleRecognitionResult(t){const e=t.results[t.results.length-1],s=e[0].transcript,n=e.isFinal;this.updateTranscriptDisplay(s,n),n&&this.evaluatePronunciation(s)}updateTranscriptDisplay(t,e){const s=this.container.querySelector(".transcript-display");s&&(s.textContent=t,s.classList.toggle("final",e))}evaluatePronunciation(t){if(!this.currentPhrase)return;const e=this.currentPhrase.text,s=this.calculateSimilarity(t,e),n=Math.round(100*s);this.attempts++,this.displayResult(n,t),this.updateStats(n),this.provideFeedback(n)}calculateSimilarity(t,e){const s=t.replace(/\s/g,"").toLowerCase(),n=e.replace(/\s/g,"").toLowerCase();if(s===n)return 1;const i=s.length>n.length?s:n,r=s.length>n.length?n:s;if(0===i.length)return 1;const a=this.levenshteinDistance(i,r);return(i.length-a)/i.length}levenshteinDistance(t,e){const s=[];for(let n=0;n<=e.length;n++){let i=n;for(let r=0;r<=t.length;r++)if(0===n)s[r]=r;else if(r>0){let a=s[r-1];t.charAt(r-1)!==e.charAt(n-1)&&(a=Math.min(Math.min(a,i),s[r])+1),s[r-1]=i,i=a}n>0&&(s[t.length]=i)}return s[t.length]}displayResult(t,e){const s=this.container.querySelector(".result-display");if(s){const n=t>=80?"excellent":t>=60?"good":"needs-practice";s.innerHTML=`\n                <div class="score ${n}">\n                    <span class="score-value">${t}%</span>\n                    <span class="score-label">${this.getScoreLabel(t)}</span>\n                </div>\n                <div class="transcript-result">\n                    <p>認識された音声: ${e}</p>\n                    <p>正解: ${this.currentPhrase.text}</p>\n                </div>\n            `}}getScoreLabel(t){return t>=90?"素晴らしい！":t>=80?"とても良い！":t>=70?"良い！":t>=60?"もう少し！":"練習を続けましょう！"}updateStats(t){this.score=Math.round((this.score*(this.attempts-1)+t)/this.attempts);const e=this.container.querySelector(".stats-display");e&&(e.innerHTML=`\n                <span>平均スコア: ${this.score}%</span>\n                <span>練習回数: ${this.attempts}回</span>\n            `)}provideFeedback(t){t>=80?this.playSound("success"):this.playSound("try-again"),this.currentPhrase.tips&&t<80&&this.showTips()}showTips(){const t=this.container.querySelector(".tips-display");t&&this.currentPhrase.tips&&(t.innerHTML=`\n                <h4>発音のコツ</h4>\n                <ul>\n                    ${this.currentPhrase.tips.map(t=>`<li>${t}</li>`).join("")}\n                </ul>\n            `,t.style.display="block")}playModelPronunciation(){if(!this.currentPhrase||!this.synthesis)return;const t=new SpeechSynthesisUtterance(this.currentPhrase.text);t.lang="ja-JP",t.rate=.9,t.pitch=1,t.volume=1;const e=this.synthesis.getVoices().find(t=>t.lang.includes("ja"));e&&(t.voice=e),this.synthesis.speak(t)}startListening(){if(this.recognition){if(!this.isListening)try{this.recognition.start(),this.hideTips(),this.clearResult()}catch(t){console.error("音声認識の開始に失敗しました:",t),this.showError("音声認識の開始に失敗しました。")}}else this.showError("音声認識が初期化されていません。")}stopListening(){this.recognition&&this.isListening&&this.recognition.stop()}handleRecognitionError(t){let e="音声認識エラー: ";switch(t.error){case"no-speech":e+="音声が検出されませんでした。";break;case"audio-capture":e+="マイクが見つかりません。";break;case"not-allowed":e+="マイクの使用が許可されていません。";break;default:e+=t.error}this.showError(e)}showError(t){const e=this.container.querySelector(".error-display");e&&(e.textContent=t,e.style.display="block",setTimeout(()=>{e.style.display="none"},5e3))}hideTips(){const t=this.container.querySelector(".tips-display");t&&(t.style.display="none")}clearResult(){const t=this.container.querySelector(".result-display");t&&(t.innerHTML="");const e=this.container.querySelector(".transcript-display");e&&(e.textContent="")}playSound(t){const e=new(window.AudioContext||window.webkitAudioContext),s=e.createOscillator(),n=e.createGain();s.connect(n),n.connect(e.destination),"success"===t?(s.frequency.value=523.25,n.gain.value=.3):(s.frequency.value=261.63,n.gain.value=.2),s.start(),s.stop(e.currentTime+.2)}updateUI(){const t=this.container.querySelector(".record-button");t&&(t.textContent=this.isListening?"停止":"録音開始",t.classList.toggle("listening",this.isListening))}attachEventListeners(){const t=this.container.querySelector(".record-button");t&&t.addEventListener("click",()=>{this.isListening?this.stopListening():this.startListening()});const e=this.container.querySelector(".play-model-button");e&&e.addEventListener("click",()=>this.playModelPronunciation());const s=this.container.querySelector(".next-phrase-button");s&&s.addEventListener("click",()=>{this.selectRandomPhrase(),this.clearResult(),this.hideTips()});const n=this.container.querySelector(".level-select");n&&n.addEventListener("change",t=>{this.selectedLevel=t.target.value,this.selectRandomPhrase(),this.clearResult(),this.hideTips()});const i=this.container.querySelector(".category-select");i&&i.addEventListener("change",t=>{this.selectedCategory=t.target.value,this.selectRandomPhrase(),this.clearResult(),this.hideTips()})}render(){this.container.innerHTML='\n            <div class="pronunciation-practice-container">\n                <div class="practice-header">\n                    <h3>敬語発音練習</h3>\n                    <div class="controls">\n                        <select class="level-select">\n                            <option value="all">全レベル</option>\n                            <option value="beginner" selected>初級</option>\n                            <option value="intermediate">中級</option>\n                            <option value="advanced">上級</option>\n                        </select>\n                        <select class="category-select">\n                            <option value="all">全カテゴリー</option>\n                            <option value="business">ビジネス</option>\n                            <option value="daily">日常会話</option>\n                            <option value="formal">フォーマル</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class="phrase-display"></div>\n\n                <div class="practice-controls">\n                    <button class="play-model-button">お手本を聞く</button>\n                    <button class="record-button">録音開始</button>\n                    <button class="next-phrase-button">次のフレーズ</button>\n                </div>\n\n                <div class="transcript-display"></div>\n                <div class="result-display"></div>\n                <div class="tips-display" style="display: none;"></div>\n                <div class="error-display" style="display: none;"></div>\n\n                <div class="stats-display">\n                    <span>平均スコア: -</span>\n                    <span>練習回数: 0回</span>\n                </div>\n            </div>\n        '}}"undefined"!=typeof module&&module.exports?module.exports=PronunciationPractice:window.PronunciationPractice=PronunciationPractice;