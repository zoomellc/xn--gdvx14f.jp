class LearningPlanManager{constructor(){this.plans=this.loadPlans(),this.currentPlan=null,this.progress=this.loadProgress()}loadPlans(){try{const e=localStorage.getItem("honorificLearningPlans");return e?JSON.parse(e):[]}catch(e){return console.error("Failed to load plans:",e),[]}}loadProgress(){try{const e=localStorage.getItem("honorificLearningProgress");return e?JSON.parse(e):{}}catch(e){return console.error("Failed to load progress:",e),{}}}savePlans(){try{localStorage.setItem("honorificLearningPlans",JSON.stringify(this.plans))}catch(e){console.error("Failed to save plans:",e),"QuotaExceededError"===e.name&&console.warn("Storage quota exceeded, trying to clean up old data")}}saveProgress(){try{localStorage.setItem("honorificLearningProgress",JSON.stringify(this.progress))}catch(e){console.error("Failed to save progress:",e)}}createPlan(e){if(!(e&&e.name&&e.level&&e.duration))throw new Error("Required plan options are missing");const t={id:Date.now().toString(),name:e.name,createdAt:(new Date).toISOString(),level:e.level,duration:e.duration,goals:e.goals||[],schedule:this.generateSchedule(e),categories:e.categories||[],customSettings:e.customSettings||{},status:"active"};return this.plans.push(t),this.savePlans(),this.progress[t.id]={startedAt:(new Date).toISOString(),completedTasks:[],currentWeek:1,totalProgress:0},this.saveProgress(),t}generateSchedule(e){const t=[],s=e.duration,r=e.customSettings.dailyStudyTime||30;for(let a=1;a<=s;a++){const n={week:a,theme:this.getWeekTheme(a,e.level,e.categories),tasks:this.generateWeekTasks(a,e),estimatedTime:7*r,milestones:[]};a%2==0&&n.milestones.push({type:"review",description:`第${a}週までの復習テスト`}),a===Math.floor(s/2)&&n.milestones.push({type:"assessment",description:"中間評価"}),a===s&&n.milestones.push({type:"final",description:"最終評価"}),t.push(n)}return t}getWeekTheme(e,t,s){const r={beginner:["基本敬語の理解","尊敬語の基礎","謙譲語の基礎","丁寧語の使い方","ビジネス場面での基本","間違いやすい敬語","メール敬語の基本","総復習と実践"],intermediate:["敬語の使い分け","二重敬語の回避","クッション言葉","場面別敬語応用","ビジネス文書の敬語","電話応対の敬語","会議での敬語","実践演習"],advanced:["微妙なニュアンス","現代的な敬語","相手別の調整","国際ビジネスでの敬語","プレゼンテーションの敬語","交渉での敬語","リーダーシップと敬語","総合実践"]},a=r[t]||r.beginner,n=Math.max(0,(e-1)%a.length);return s.length>0&&e<=s.length?`${s[e-1]}の強化週間`:a[n]}generateWeekTasks(e,t){const s=[],r=t.level,a=t.customSettings.tasksPerDay||3;for(let t=1;t<=7;t++){const n=[];a>=1&&n.push({id:`w${e}d${t}t1`,type:"study",title:this.getStudyTaskTitle(e,t,r),estimatedTime:15,points:10}),a>=2&&n.push({id:`w${e}d${t}t2`,type:"practice",title:this.getPracticeTaskTitle(e,t,r),estimatedTime:10,points:15}),a>=3&&n.push({id:`w${e}d${t}t3`,type:"application",title:this.getApplicationTaskTitle(e,t,r),estimatedTime:5,points:20}),s.push({day:t,tasks:n})}return s}getStudyTaskTitle(e,t,s){const r={beginner:["基本動詞の敬語変換を5つ覚える","敬語の種類について読む","よく使う敬語表現を10個学ぶ","ビジネスメールの定型文を覚える","間違いやすい敬語を確認する"],intermediate:["場面別敬語表現を学ぶ","クッション言葉を5つマスター","二重敬語のチェックリストを作成","ビジネス文書のテンプレート学習","敬語のニュアンスを理解する"],advanced:["高度な敬語表現を研究","相手別の微調整を学ぶ","ケーススタディを分析","プレゼン用敬語を準備","国際ビジネスでの敬語を学ぶ"]},a=r[s]||r.beginner;return a[t%a.length]}getPracticeTaskTitle(e,t,s){const r={beginner:["敬語変換ツールで10問練習","敬語クイズに挑戦","メール文を敬語で書く練習","電話応対のロールプレイ","自己紹介を敬語で練習"],intermediate:["ビジネスシーンのロールプレイ","議事録を敬語で作成","苦情対応の練習","プレゼンテーション練習","交渉場面の敬語練習"],advanced:["複雑な状況での敬語選択","国際会議のシミュレーション","エグゼクティブ対応練習","危機管理時の敬語使用","メディア対応の練習"]},a=r[s]||r.beginner;return a[t%a.length]}getApplicationTaskTitle(e,t,s){return"実際の場面で敬語を使ってみる"}completeTask(e,t){e&&t?(this.progress[e]||(this.progress[e]={startedAt:(new Date).toISOString(),completedTasks:[],currentWeek:1,totalProgress:0}),this.progress[e].completedTasks||(this.progress[e].completedTasks=[]),this.progress[e].completedTasks.includes(t)||(this.progress[e].completedTasks.push(t),this.updateProgress(e),this.saveProgress())):console.error("Invalid planId or taskId")}updateProgress(e){const t=this.plans.find(t=>t.id===e);if(!t)return;const s=this.countTotalTasks(t),r=this.progress[e].completedTasks.length;this.progress[e].totalProgress=Math.round(r/s*100);const a=s/t.duration;this.progress[e].currentWeek=Math.min(Math.ceil(r/a),t.duration)}countTotalTasks(e){let t=0;return e.schedule.forEach(e=>{e.tasks.forEach(e=>{t+=e.tasks.length})}),t}getCurrentPlan(){return!this.currentPlan&&this.plans.length>0&&(this.currentPlan=this.plans.find(e=>"active"===e.status)),this.currentPlan}setActivePlan(e){this.plans.forEach(e=>e.status="inactive");const t=this.plans.find(t=>t.id===e);t&&(t.status="active",this.currentPlan=t,this.savePlans())}generateWeeklyReport(e,t){const s=this.plans.find(t=>t.id===e),r=this.progress[e];if(!s||!r)return null;const a=s.schedule[t-1];if(!a)return null;let n=0,i=0,o=0;return a.tasks.forEach(e=>{e.tasks.forEach(e=>{i++,r.completedTasks&&r.completedTasks.includes(e.id)&&(n++,o+=e.points)})}),{week:t,theme:a.theme,completedTasks:n,totalTasks:i,completionRate:Math.round(n/i*100),points:o,milestones:a.milestones}}getStatistics(e){const t=this.plans.find(t=>t.id===e),s=this.progress[e];if(!t||!s)return null;const r=new Date(s.startedAt),a=new Date,n=Math.floor((a-r)/864e5),i=this.countTotalTasks(t),o=s.completedTasks.length,l=i-o,c=n>0?o/n:0,d=c>0?Math.ceil(l/c):7*t.duration;return{daysElapsed:n,totalProgress:s.totalProgress,completedTasks:o,totalTasks:i,averageTasksPerDay:c.toFixed(1),estimatedCompletionDate:new Date(a.getTime()+24*d*60*60*1e3),currentWeek:s.currentWeek,totalWeeks:t.duration}}}window.LearningPlanManager=LearningPlanManager;