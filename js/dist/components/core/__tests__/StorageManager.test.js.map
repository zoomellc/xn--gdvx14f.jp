{"version":3,"file":"StorageManager.test.js","sourceRoot":"","sources":["../../../../src/components/core/__tests__/StorageManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { StorageManager } from '../StorageManager';\n\ndescribe('StorageManager', () => {\n  let storage: StorageManager;\n  \n  beforeEach(() => {\n    storage = new StorageManager({ prefix: 'test_' });\n    localStorage.clear();\n    jest.clearAllMocks();\n  });\n\n  describe('constructor', () => {\n    it('should use default prefix when not provided', () => {\n      const defaultStorage = new StorageManager();\n      defaultStorage.set('key', 'value');\n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        expect.stringContaining('keigo_key'),\n        expect.any(String)\n      );\n    });\n\n    it('should use custom prefix when provided', () => {\n      storage.set('key', 'value');\n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        expect.stringContaining('test_key'),\n        expect.any(String)\n      );\n    });\n  });\n\n  describe('set', () => {\n    it('should store value with timestamp', () => {\n      const result = storage.set('key', 'value');\n      \n      expect(result).toBe(true);\n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        'test_key',\n        expect.stringContaining('\"value\":\"value\"')\n      );\n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        'test_key',\n        expect.stringContaining('\"timestamp\":')\n      );\n    });\n\n    it('should store value with TTL', () => {\n      const ttl = 5000;\n      storage.set('key', 'value', ttl);\n      \n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        'test_key',\n        expect.stringContaining('\"expires\":')\n      );\n    });\n\n    it('should return false on error', () => {\n      (localStorage.setItem as jest.Mock).mockImplementation(() => {\n        throw new Error('Storage full');\n      });\n      \n      const result = storage.set('key', 'value');\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('get', () => {\n    it('should retrieve stored value', () => {\n      const storedData = {\n        value: 'test value',\n        timestamp: Date.now()\n      };\n      (localStorage.getItem as jest.Mock).mockReturnValue(JSON.stringify(storedData));\n      \n      const result = storage.get('key');\n      expect(result).toBe('test value');\n      expect(localStorage.getItem).toHaveBeenCalledWith('test_key');\n    });\n\n    it('should return null for non-existent key', () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(null);\n      \n      const result = storage.get('nonexistent');\n      expect(result).toBeNull();\n    });\n\n    it('should return null for expired item', () => {\n      const storedData = {\n        value: 'test value',\n        timestamp: Date.now() - 10000,\n        expires: Date.now() - 5000\n      };\n      (localStorage.getItem as jest.Mock).mockReturnValue(JSON.stringify(storedData));\n      \n      const result = storage.get('key');\n      expect(result).toBeNull();\n      expect(localStorage.removeItem).toHaveBeenCalledWith('test_key');\n    });\n\n    it('should return value for non-expired item', () => {\n      const storedData = {\n        value: 'test value',\n        timestamp: Date.now(),\n        expires: Date.now() + 5000\n      };\n      (localStorage.getItem as jest.Mock).mockReturnValue(JSON.stringify(storedData));\n      \n      const result = storage.get('key');\n      expect(result).toBe('test value');\n    });\n\n    it('should return null on parse error', () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue('invalid json');\n      \n      const result = storage.get('key');\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('remove', () => {\n    it('should remove item from storage', () => {\n      const result = storage.remove('key');\n      \n      expect(result).toBe(true);\n      expect(localStorage.removeItem).toHaveBeenCalledWith('test_key');\n    });\n\n    it('should return false on error', () => {\n      (localStorage.removeItem as jest.Mock).mockImplementation(() => {\n        throw new Error('Remove failed');\n      });\n      \n      const result = storage.remove('key');\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('clear', () => {\n    const originalObjectKeys = Object.keys;\n    \n    beforeEach(() => {\n      Object.keys = jest.fn().mockReturnValue(['test_key1', 'test_key2', 'other_key']);\n    });\n    \n    afterEach(() => {\n      Object.keys = originalObjectKeys;\n    });\n\n    it('should clear all items with prefix', () => {\n      storage.clear();\n      \n      expect(localStorage.removeItem).toHaveBeenCalledWith('test_key1');\n      expect(localStorage.removeItem).toHaveBeenCalledWith('test_key2');\n      expect(localStorage.removeItem).not.toHaveBeenCalledWith('other_key');\n    });\n\n    it('should clear items matching pattern', () => {\n      storage.clear('key1');\n      \n      expect(localStorage.removeItem).toHaveBeenCalledWith('test_key1');\n      expect(localStorage.removeItem).not.toHaveBeenCalledWith('test_key2');\n    });\n\n    it('should return false on error', () => {\n      const originalObjectKeys = Object.keys;\n      Object.keys = jest.fn().mockImplementation(() => {\n        throw new Error('Keys failed');\n      });\n      \n      const result = storage.clear();\n      expect(result).toBe(false);\n      \n      Object.keys = originalObjectKeys;\n    });\n  });\n\n  describe('has', () => {\n    it('should return true for existing key', () => {\n      const storedData = {\n        value: 'test value',\n        timestamp: Date.now()\n      };\n      (localStorage.getItem as jest.Mock).mockReturnValue(JSON.stringify(storedData));\n      \n      const result = storage.has('key');\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-existent key', () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(null);\n      \n      const result = storage.has('key');\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getAll', () => {\n    const originalObjectKeys = Object.keys;\n    \n    beforeEach(() => {\n      Object.keys = jest.fn().mockReturnValue(['test_key1', 'test_key2', 'other_key']);\n      (localStorage.getItem as jest.Mock).mockImplementation((key: string) => {\n        const data: Record<string, any> = {\n          'test_key1': JSON.stringify({ value: 'value1', timestamp: Date.now() }),\n          'test_key2': JSON.stringify({ value: 'value2', timestamp: Date.now() })\n        };\n        return data[key] || null;\n      });\n    });\n    \n    afterEach(() => {\n      Object.keys = originalObjectKeys;\n    });\n\n    it('should return all items with prefix', () => {\n      const result = storage.getAll();\n      \n      expect(result).toEqual({\n        key1: 'value1',\n        key2: 'value2'\n      });\n    });\n\n    it('should filter by pattern', () => {\n      const result = storage.getAll('key1');\n      \n      expect(result).toEqual({\n        key1: 'value1'\n      });\n    });\n  });\n\n  describe('getSize', () => {\n    const originalObjectKeys = Object.keys;\n    \n    beforeEach(() => {\n      Object.keys = jest.fn().mockReturnValue(['test_key1', 'test_key2']);\n      (localStorage.getItem as jest.Mock).mockImplementation((key: string) => {\n        const data: Record<string, string> = {\n          'test_key1': '12345',\n          'test_key2': '123456789'\n        };\n        return data[key] || null;\n      });\n    });\n    \n    afterEach(() => {\n      Object.keys = originalObjectKeys;\n    });\n\n    it('should calculate total size of stored items', () => {\n      const size = storage.getSize();\n      \n      // test_key1 (9) + 12345 (5) + test_key2 (9) + 123456789 (9) = 32\n      expect(size).toBe(32);\n    });\n  });\n\n  describe('isAvailable', () => {\n    it('should return true when localStorage is available', () => {\n      const result = storage.isAvailable();\n      expect(result).toBe(true);\n    });\n\n    it('should return false when localStorage throws error', () => {\n      (localStorage.setItem as jest.Mock).mockImplementation(() => {\n        throw new Error('Storage not available');\n      });\n      \n      const result = storage.isAvailable();\n      expect(result).toBe(false);\n    });\n  });\n});"]}