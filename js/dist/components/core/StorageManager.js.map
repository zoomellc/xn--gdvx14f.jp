{"version":3,"file":"StorageManager.js","sourceRoot":"","sources":["../../../src/components/core/StorageManager.ts"],"names":[],"mappings":"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","sourcesContent":["export interface StorageOptions {\n  prefix?: string;\n  ttl?: number;\n}\n\nexport interface StorageItem<T = any> {\n  value: T;\n  timestamp?: number;\n  expires?: number;\n}\n\nexport class StorageManager {\n  private prefix: string;\n  private defaultTTL?: number;\n\n  constructor(options: StorageOptions = {}) {\n    this.prefix = options.prefix || 'keigo_';\n    this.defaultTTL = options.ttl;\n  }\n\n  private getKey(key: string): string {\n    return `${this.prefix}${key}`;\n  }\n\n  set<T>(key: string, value: T, ttl?: number): boolean {\n    try {\n      const item: StorageItem<T> = {\n        value,\n        timestamp: Date.now()\n      };\n\n      if (ttl || this.defaultTTL) {\n        item.expires = Date.now() + (ttl || this.defaultTTL!);\n      }\n\n      localStorage.setItem(this.getKey(key), JSON.stringify(item));\n      return true;\n    } catch (error) {\n      console.error('Storage set error:', error);\n      return false;\n    }\n  }\n\n  get<T>(key: string): T | null {\n    try {\n      const data = localStorage.getItem(this.getKey(key));\n      if (!data) return null;\n\n      const item: StorageItem<T> = JSON.parse(data);\n\n      if (item.expires && item.expires < Date.now()) {\n        this.remove(key);\n        return null;\n      }\n\n      return item.value;\n    } catch (error) {\n      console.error('Storage get error:', error);\n      return null;\n    }\n  }\n\n  remove(key: string): boolean {\n    try {\n      localStorage.removeItem(this.getKey(key));\n      return true;\n    } catch (error) {\n      console.error('Storage remove error:', error);\n      return false;\n    }\n  }\n\n  clear(pattern?: string): boolean {\n    try {\n      const keys = Object.keys(localStorage);\n      const prefix = this.getKey(pattern || '');\n      \n      keys.forEach(key => {\n        if (key.startsWith(prefix)) {\n          localStorage.removeItem(key);\n        }\n      });\n      \n      return true;\n    } catch (error) {\n      console.error('Storage clear error:', error);\n      return false;\n    }\n  }\n\n  has(key: string): boolean {\n    return this.get(key) !== null;\n  }\n\n  getAll<T>(pattern?: string): Record<string, T> {\n    const result: Record<string, T> = {};\n    const keys = Object.keys(localStorage);\n    const prefix = this.getKey(pattern || '');\n\n    keys.forEach(key => {\n      if (key.startsWith(prefix)) {\n        const cleanKey = key.replace(this.prefix, '');\n        const value = this.get<T>(cleanKey);\n        if (value !== null) {\n          result[cleanKey] = value;\n        }\n      }\n    });\n\n    return result;\n  }\n\n  getSize(): number {\n    let size = 0;\n    const keys = Object.keys(localStorage);\n    \n    keys.forEach(key => {\n      if (key.startsWith(this.prefix)) {\n        const item = localStorage.getItem(key);\n        if (item) {\n          size += item.length + key.length;\n        }\n      }\n    });\n\n    return size;\n  }\n\n  isAvailable(): boolean {\n    try {\n      const testKey = '__test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const defaultStorage = new StorageManager();"]}