!function(){"use strict";const e={metricsKey:"performanceMetricsHistory",init:function(){this.recordCurrentMetrics(),this.setupMetricsViewer()},recordCurrentMetrics:function(){var e=this;setTimeout(function(){const t=window.getWebVitals?window.getWebVitals():{},n=window.RUM?window.RUM.getMetrics():[],r={timestamp:(new Date).toISOString(),url:window.location.href,userAgent:navigator.userAgent,viewport:{width:window.innerWidth,height:window.innerHeight},connection:e.getConnectionInfo(),webVitals:t,resourceCount:performance.getEntriesByType("resource").length,pageLoadTime:e.getPageLoadTime(),rumSummary:e.summarizeRumMetrics(n)};e.saveMetrics(r)},5e3)},getConnectionInfo:function(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return e?{effectiveType:e.effectiveType,downlink:e.downlink,rtt:e.rtt,saveData:e.saveData||!1}:null},getPageLoadTime:function(){const e=performance.getEntriesByType("navigation")[0];return e?{domContentLoaded:e.domContentLoadedEventEnd-e.domContentLoadedEventStart,loadComplete:e.loadEventEnd-e.loadEventStart,totalTime:e.loadEventEnd-e.fetchStart}:null},summarizeRumMetrics:function(e){const t={pageViews:0,interactions:0,errors:0,slowResources:0};return e.forEach(function(e){switch(e.type){case"pageview":t.pageViews++;break;case"interaction":t.interactions++;break;case"error":t.errors++;break;case"slow_resource":t.slowResources++}}),t},saveMetrics:function(e){let t=this.getMetricsHistory();const n=this.getDeploymentMarker();n&&(e.deployment=n),t.push(e),t.length>100&&(t=t.slice(-100));try{localStorage.setItem(this.metricsKey,JSON.stringify(t)),console.log("Performance metrics recorded:",e)}catch(e){console.error("Failed to save performance metrics:",e)}},getMetricsHistory:function(){try{return JSON.parse(localStorage.getItem(this.metricsKey)||"[]")}catch(e){return[]}},getDeploymentMarker:function(){const e=new URLSearchParams(window.location.search).get("deployment");if(e)return e;const t=document.querySelector('meta[name="deployment-id"]');return t?t.content:null},compareMetrics:function(e,t){const n=this.getMetricsHistory(),r=new Date(e).getTime(),o=new Date(t).getTime(),i=[],c=[];return n.forEach(function(e){const t=new Date(e.timestamp).getTime();t<=r?i.push(e):t>=o&&c.push(e)}),{before:this.aggregateMetrics(i),after:this.aggregateMetrics(c),improvement:this.calculateImprovement(i,c)}},aggregateMetrics:function(e){if(0===e.length)return null;const t={LCP:[],FID:[],CLS:[],FCP:[],TTFB:[]};e.forEach(function(e){e.webVitals&&Object.keys(t).forEach(function(n){e.webVitals[n]&&e.webVitals[n].latest&&t[n].push(e.webVitals[n].latest)})});const n={};return Object.keys(t).forEach(function(e){t[e].length>0&&(n[e]={average:t[e].reduce((e,t)=>e+t,0)/t[e].length,min:Math.min(...t[e]),max:Math.max(...t[e]),count:t[e].length})}),n},calculateImprovement:function(e,t){const n=this.aggregateMetrics(e),r=this.aggregateMetrics(t);if(!n||!r)return null;const o={};return Object.keys(n).forEach(function(e){if(r[e]){const t=(n[e].average-r[e].average)/n[e].average*100;o[e]={percentChange:t,improved:t>0,beforeAvg:n[e].average,afterAvg:r[e].average}}}),o},setupMetricsViewer:function(){var e=this;document.addEventListener("keydown",function(t){t.ctrlKey&&t.shiftKey&&"M"===t.key&&e.showMetricsReport()})},showMetricsReport:function(){const e=this.getMetricsHistory(),t=e[e.length-1];console.group("Performance Metrics Report"),console.log("Total records:",e.length),console.log("Latest metrics:",t);const n=new Date;n.setDate(n.getDate()-7);const r=this.compareMetrics(n.toISOString(),(new Date).toISOString());r.improvement&&console.log("7-day improvement:",r.improvement),console.groupEnd()},exportMetrics:function(){const e=this.getMetricsHistory(),t=JSON.stringify(e,null,2),n="data:application/json;charset=utf-8,"+encodeURIComponent(t),r="performance-metrics-"+(new Date).toISOString().split("T")[0]+".json",o=document.createElement("a");o.setAttribute("href",n),o.setAttribute("download",r),o.click()},clearHistory:function(){confirm("Are you sure you want to clear all performance metrics history?")&&(localStorage.removeItem(this.metricsKey),console.log("Performance metrics history cleared"))},recordABTestEvent:function(e,t){const n={timestamp:(new Date).toISOString(),event:e,data:t,url:window.location.href,viewport:{width:window.innerWidth,height:window.innerHeight}},r="abTestMetrics";let o=[];try{o=JSON.parse(localStorage.getItem(r)||"[]")}catch(e){console.error("Failed to parse A/B test history:",e)}o.push(n),o.length>500&&(o=o.slice(-500));try{localStorage.setItem(r,JSON.stringify(o))}catch(e){console.error("Failed to save A/B test metrics:",e)}}};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",function(){e.init()}):e.init(),window.PerformanceMetrics=e}();