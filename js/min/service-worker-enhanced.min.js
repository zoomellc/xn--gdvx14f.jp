const CACHE_VERSION="2025-07-24-003",CACHE_PREFIX="keigo-jp",CACHE_NAMES={STATIC:`keigo-jp-static-v${CACHE_VERSION}`,RUNTIME:`keigo-jp-runtime-v${CACHE_VERSION}`,IMAGES:`keigo-jp-images-v${CACHE_VERSION}`,FAVORITES:"keigo-jp-favorites",API:`keigo-jp-api-v${CACHE_VERSION}`},CRITICAL_RESOURCES=["/","/offline.html","/css/critical.css","/js/min/dark-mode.min.js","/favicon/favicon.ico"],STATIC_RESOURCES=["/css/style.css","/css/custom.css","/css/fonts-optimized.css","/css/blonde.min.css","/css/accessibility.css","/css/mobile-responsive.css","/js/min/core.min.js","/js/min/interactive.min.js","/js/min/keyboard-navigation.min.js","/js/min/web-vitals.min.js","/js/min/favorites.min.js"],STRATEGIES={CACHE_FIRST:"cache-first",NETWORK_FIRST:"network-first",CACHE_ONLY:"cache-only",NETWORK_ONLY:"network-only",STALE_WHILE_REVALIDATE:"stale-while-revalidate"},ROUTE_STRATEGIES=[{pattern:/\.(?:js|css)$/,strategy:STRATEGIES.CACHE_FIRST,cacheName:CACHE_NAMES.STATIC},{pattern:/\.(?:png|jpg|jpeg|svg|gif|webp|avif)$/,strategy:STRATEGIES.CACHE_FIRST,cacheName:CACHE_NAMES.IMAGES},{pattern:/\.(?:woff|woff2|ttf|otf)$/,strategy:STRATEGIES.CACHE_FIRST,cacheName:CACHE_NAMES.STATIC},{pattern:/\/api\//,strategy:STRATEGIES.NETWORK_FIRST,cacheName:CACHE_NAMES.API},{pattern:/\.html$/,strategy:STRATEGIES.STALE_WHILE_REVALIDATE,cacheName:CACHE_NAMES.RUNTIME},{pattern:/\/$/,strategy:STRATEGIES.STALE_WHILE_REVALIDATE,cacheName:CACHE_NAMES.RUNTIME}];self.addEventListener("install",e=>{e.waitUntil(Promise.all([caches.open(CACHE_NAMES.STATIC).then(e=>e.addAll([...CRITICAL_RESOURCES,...STATIC_RESOURCES])),caches.open(CACHE_NAMES.RUNTIME).then(e=>fetch("/index.json").then(e=>e.json()).then(t=>{const a=t.slice(0,5).map(e=>e.url);return e.addAll(a)}).catch(()=>console.log("Could not pre-cache posts")))]))}),self.addEventListener("activate",e=>{e.waitUntil((async()=>{"navigationPreload"in self.registration&&await self.registration.navigationPreload.enable();const e=Object.values(CACHE_NAMES),t=await caches.keys();await Promise.all(t.filter(t=>t.startsWith("keigo-jp")&&!e.includes(t)).map(e=>caches.delete(e))),await self.clients.claim()})())});const cacheStrategies={[STRATEGIES.CACHE_FIRST]:async(e,t)=>{const a=await caches.open(t),s=await a.match(e);if(s)return fetch(e).then(t=>{t&&200===t.status&&a.put(e,t.clone())}).catch(()=>{}),s;const c=await fetch(e);return c&&200===c.status&&a.put(e,c.clone()),c},[STRATEGIES.NETWORK_FIRST]:async(e,t)=>{try{const a=await fetch(e);return a&&200===a.status&&(await caches.open(t)).put(e,a.clone()),a}catch(t){const a=await caches.match(e);if(a)return a;throw t}},[STRATEGIES.STALE_WHILE_REVALIDATE]:async(e,t)=>{const a=await caches.open(t),s=await a.match(e),c=fetch(e).then(t=>(t&&200===t.status&&a.put(e,t.clone()),t));return s||c},[STRATEGIES.CACHE_ONLY]:async e=>{const t=await caches.match(e);if(!t)throw new Error("No cache match");return t},[STRATEGIES.NETWORK_ONLY]:async e=>fetch(e)};async function syncFavorites(){const e=await caches.open(CACHE_NAMES.FAVORITES),t=await e.keys();return Promise.all(t.map(t=>fetch(t).then(a=>{if(a&&200===a.status)return e.put(t,a)}).catch(()=>{})))}async function updateCachedContent(){const e=await caches.open(CACHE_NAMES.RUNTIME),t=await e.keys();return Promise.all(t.slice(0,10).map(t=>fetch(t).then(a=>{if(a&&200===a.status)return e.put(t,a)}).catch(()=>{})))}self.addEventListener("fetch",e=>{"GET"===e.request.method&&e.request.url.startsWith(self.location.origin)&&e.respondWith((async()=>{if(e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const t=new URL(e.request.url),a=ROUTE_STRATEGIES.find(e=>e.pattern.test(t.pathname));if(a)try{return await cacheStrategies[a.strategy](e.request,a.cacheName)}catch(t){if("navigate"===e.request.mode){const e=await caches.match("/offline.html");if(e)return e}throw t}return cacheStrategies[STRATEGIES.NETWORK_FIRST](e.request,CACHE_NAMES.RUNTIME)})())}),self.addEventListener("message",e=>{if(e.data)switch(e.data.type){case"SKIP_WAITING":self.skipWaiting();break;case"CACHE_ARTICLE":e.data.url&&caches.open(CACHE_NAMES.FAVORITES).then(t=>fetch(e.data.url).then(a=>{a&&200===a.status&&t.put(e.data.url,a)}));break;case"UNCACHE_ARTICLE":e.data.url&&caches.open(CACHE_NAMES.FAVORITES).then(t=>t.delete(e.data.url));break;case"CLEAR_ALL_CACHES":caches.keys().then(e=>Promise.all(e.map(e=>caches.delete(e)))).then(()=>e.ports[0].postMessage({success:!0}))}}),self.addEventListener("sync",e=>{"sync-favorites"===e.tag&&e.waitUntil(syncFavorites())}),self.addEventListener("periodicsync",e=>{"update-content"===e.tag&&e.waitUntil(updateCachedContent())});