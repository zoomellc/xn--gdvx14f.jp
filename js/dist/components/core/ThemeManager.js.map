{"version":3,"file":"ThemeManager.js","sourceRoot":"","sources":["../../../src/components/core/ThemeManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { StorageManager } from './StorageManager';\n\nexport type Theme = 'light' | 'dark' | 'auto';\n\nexport interface ThemeConfig {\n  storageKey?: string;\n  defaultTheme?: Theme;\n  onChange?: (theme: Theme) => void;\n}\n\nexport class ThemeManager {\n  private storage: StorageManager;\n  private currentTheme: Theme;\n  private systemTheme: 'light' | 'dark';\n  private config: Required<ThemeConfig>;\n  private mediaQuery: MediaQueryList | null = null;\n\n  constructor(config: ThemeConfig = {}) {\n    this.config = {\n      storageKey: 'theme',\n      defaultTheme: 'auto',\n      onChange: () => {},\n      ...config\n    };\n\n    this.storage = new StorageManager({ prefix: 'keigo_theme_' });\n    this.systemTheme = this.getSystemTheme();\n    this.currentTheme = this.loadTheme();\n    \n    this.init();\n  }\n\n  private init(): void {\n    if (typeof window === 'undefined') return;\n\n    this.applyTheme();\n    this.setupSystemThemeListener();\n    this.setupToggleButton();\n  }\n\n  private getSystemTheme(): 'light' | 'dark' {\n    if (typeof window === 'undefined') return 'light';\n    \n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n\n  private loadTheme(): Theme {\n    const saved = this.storage.get<Theme>(this.config.storageKey);\n    return saved || this.config.defaultTheme;\n  }\n\n  private saveTheme(theme: Theme): void {\n    this.storage.set(this.config.storageKey, theme);\n  }\n\n  private setupSystemThemeListener(): void {\n    if (typeof window === 'undefined') return;\n\n    this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      this.systemTheme = e.matches ? 'dark' : 'light';\n      if (this.currentTheme === 'auto') {\n        this.applyTheme();\n      }\n    };\n\n    if (this.mediaQuery.addEventListener) {\n      this.mediaQuery.addEventListener('change', handleChange);\n    } else {\n      this.mediaQuery.addListener(handleChange);\n    }\n  }\n\n  private applyTheme(): void {\n    const effectiveTheme = this.getEffectiveTheme();\n    \n    document.documentElement.classList.remove('light', 'dark');\n    document.documentElement.classList.add(effectiveTheme);\n    document.documentElement.setAttribute('data-theme', effectiveTheme);\n    \n    this.updateToggleButton(effectiveTheme);\n    this.config.onChange(this.currentTheme);\n  }\n\n  private getEffectiveTheme(): 'light' | 'dark' {\n    return this.currentTheme === 'auto' ? this.systemTheme : this.currentTheme;\n  }\n\n  private setupToggleButton(): void {\n    const button = document.getElementById('dark-mode-toggle');\n    if (!button) return;\n\n    button.addEventListener('click', () => this.toggle());\n    \n    const effectiveTheme = this.getEffectiveTheme();\n    this.updateToggleButton(effectiveTheme);\n  }\n\n  private updateToggleButton(theme: 'light' | 'dark'): void {\n    const button = document.getElementById('dark-mode-toggle');\n    if (!button) return;\n\n    const icons = {\n      light: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <path d=\"M12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\"/>\n        <path d=\"M13 1h-2v3h2V1zm0 19h-2v3h2v-3zM4 11H1v2h3v-2zm19 0h-3v2h3v-2z\"/>\n        <path transform=\"rotate(-45 6.343 6.343)\" d=\"M5.343 5.343h2v2h-2z\"/>\n        <path transform=\"rotate(-45 17.657 17.657)\" d=\"M16.657 16.657h2v2h-2z\"/>\n        <path transform=\"rotate(45 6.343 17.657)\" d=\"M5.343 16.657h2v2h-2z\"/>\n        <path transform=\"rotate(45 17.657 6.343)\" d=\"M16.657 5.343h2v2h-2z\"/>\n      </svg>`,\n      dark: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <path d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-3 0-5.4-2.4-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z\"/>\n      </svg>`\n    };\n\n    button.innerHTML = icons[theme];\n    button.setAttribute('aria-label', theme === 'light' ? 'ダークモードに切り替え' : 'ライトモードに切り替え');\n  }\n\n  setTheme(theme: Theme): void {\n    this.currentTheme = theme;\n    this.saveTheme(theme);\n    this.applyTheme();\n  }\n\n  getTheme(): Theme {\n    return this.currentTheme;\n  }\n\n  getEffectiveThemeValue(): 'light' | 'dark' {\n    return this.getEffectiveTheme();\n  }\n\n  toggle(): void {\n    const themes: Theme[] = ['light', 'dark', 'auto'];\n    const currentIndex = themes.indexOf(this.currentTheme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    this.setTheme(themes[nextIndex]);\n  }\n\n  isAvailable(): boolean {\n    return this.storage.isAvailable();\n  }\n\n  static addCustomTheme(name: string, cssVariables: Record<string, string>): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      [data-theme=\"${name}\"] {\n        ${Object.entries(cssVariables)\n          .map(([key, value]) => `--${key}: ${value};`)\n          .join('\\n')}\n      }\n    `;\n    document.head.appendChild(style);\n  }\n}\n\nexport const defaultThemeManager = new ThemeManager();"]}