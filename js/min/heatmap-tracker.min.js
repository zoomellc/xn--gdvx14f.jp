!function(){"use strict";class t{constructor(t={}){if(this.config={enabled:!1!==t.enabled,sampleRate:t.sampleRate||.1,trackClicks:!1!==t.trackClicks,trackMouseMovement:!1!==t.trackMouseMovement,trackScroll:!1!==t.trackScroll,trackTouch:!1!==t.trackTouch,mouseMoveThrottle:t.mouseMoveThrottle||50,scrollThrottle:t.scrollThrottle||100,batchSize:t.batchSize||50,flushInterval:t.flushInterval||5e3,endpoint:t.endpoint||"/api/heatmap",storageKey:"keigo-jp-heatmap",sessionId:this.generateSessionId(),debug:t.debug||!1},this.events=[],this.mousePositions=[],this.lastMouseMove=0,this.lastScroll=0,this.flushTimer=null,Math.random()>this.config.sampleRate)return this.config.enabled=!1,void(this.config.debug&&console.log("Heatmap tracking disabled for this session (sampling)"));this.config.enabled&&this.init()}generateSessionId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}init(){this.injectStyles(),this.attachEventListeners(),this.startFlushTimer(),this.loadExistingData(),this.config.debug&&this.createDebugOverlay()}injectStyles(){const t=document.createElement("style");t.textContent="\n                .heatmap-debug-overlay {\n                    position: fixed;\n                    bottom: 20px;\n                    right: 20px;\n                    background: rgba(0, 0, 0, 0.8);\n                    color: white;\n                    padding: 10px;\n                    border-radius: 5px;\n                    font-family: monospace;\n                    font-size: 12px;\n                    z-index: 10000;\n                    max-width: 300px;\n                }\n                \n                .heatmap-debug-overlay h4 {\n                    margin: 0 0 10px 0;\n                    font-size: 14px;\n                }\n                \n                .heatmap-debug-overlay table {\n                    width: 100%;\n                    border-collapse: collapse;\n                }\n                \n                .heatmap-debug-overlay td {\n                    padding: 2px 5px;\n                    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n                }\n                \n                .heatmap-debug-overlay td:first-child {\n                    text-align: right;\n                    padding-right: 10px;\n                }\n                \n                .heatmap-click-indicator {\n                    position: absolute;\n                    width: 20px;\n                    height: 20px;\n                    border-radius: 50%;\n                    background: rgba(255, 0, 0, 0.5);\n                    border: 2px solid rgba(255, 0, 0, 0.8);\n                    pointer-events: none;\n                    animation: heatmap-pulse 1s ease-out;\n                    z-index: 9999;\n                }\n                \n                @keyframes heatmap-pulse {\n                    0% {\n                        transform: scale(0);\n                        opacity: 1;\n                    }\n                    100% {\n                        transform: scale(2);\n                        opacity: 0;\n                    }\n                }\n                \n                .heatmap-scroll-indicator {\n                    position: fixed;\n                    right: 10px;\n                    width: 4px;\n                    background: rgba(0, 255, 0, 0.3);\n                    pointer-events: none;\n                    transition: all 0.3s ease;\n                    z-index: 9998;\n                }\n            ",document.head.appendChild(t)}attachEventListeners(){this.config.trackClicks&&(document.addEventListener("click",this.handleClick.bind(this),!0),document.addEventListener("touchend",this.handleTouch.bind(this),!0)),this.config.trackMouseMovement&&document.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.config.trackScroll&&(window.addEventListener("scroll",this.handleScroll.bind(this)),this.recordScroll()),this.config.trackTouch&&(document.addEventListener("touchstart",this.handleTouchStart.bind(this)),document.addEventListener("touchmove",this.handleTouchMove.bind(this))),window.addEventListener("beforeunload",()=>{this.flush(!0)}),document.addEventListener("visibilitychange",()=>{document.hidden&&this.flush()})}handleClick(t){const e=t.target,n={type:"click",x:t.pageX,y:t.pageY,clientX:t.clientX,clientY:t.clientY,target:this.getTargetInfo(e),timestamp:Date.now(),pageUrl:window.location.href,viewport:this.getViewport()};this.addEvent(n),this.config.debug&&this.showClickIndicator(t.clientX,t.clientY)}handleTouch(t){if(t.changedTouches&&t.changedTouches.length>0){const e=t.changedTouches[0],n=document.elementFromPoint(e.clientX,e.clientY),o={type:"touch",x:e.pageX,y:e.pageY,clientX:e.clientX,clientY:e.clientY,target:this.getTargetInfo(n),timestamp:Date.now(),pageUrl:window.location.href,viewport:this.getViewport()};this.addEvent(o)}}handleMouseMove(t){const e=Date.now();if(e-this.lastMouseMove<this.config.mouseMoveThrottle)return;this.lastMouseMove=e;const n={x:t.pageX,y:t.pageY,timestamp:e};this.mousePositions.push(n),this.mousePositions.length>100&&(this.mousePositions=this.mousePositions.slice(-50))}handleScroll(){const t=Date.now();t-this.lastScroll<this.config.scrollThrottle||(this.lastScroll=t,this.recordScroll())}recordScroll(){const t={type:"scroll",scrollY:window.pageYOffset,scrollX:window.pageXOffset,scrollHeight:document.documentElement.scrollHeight,scrollWidth:document.documentElement.scrollWidth,timestamp:Date.now(),pageUrl:window.location.href,viewport:this.getViewport()};this.addEvent(t),this.config.debug&&this.updateScrollIndicator()}handleTouchStart(t){if(t.touches&&t.touches.length>0){const e=t.touches[0],n={type:"touchstart",x:e.pageX,y:e.pageY,touches:t.touches.length,timestamp:Date.now(),pageUrl:window.location.href};this.addEvent(n)}}handleTouchMove(t){const e=Date.now();if(!(e-this.lastMouseMove<2*this.config.mouseMoveThrottle)&&(this.lastMouseMove=e,t.touches&&t.touches.length>0)){const n=t.touches[0],o={type:"touchmove",x:n.pageX,y:n.pageY,touches:t.touches.length,timestamp:e,pageUrl:window.location.href};this.addEvent(o)}}getTargetInfo(t){return t?{tagName:t.tagName,id:t.id||null,className:t.className||null,text:t.textContent?t.textContent.substring(0,50):null,href:t.href||null,selector:this.getSelector(t)}:null}getSelector(t){if(!t)return"";if(t.id)return"#"+t.id;let e=[];for(;t&&t.nodeType===Node.ELEMENT_NODE;){let n=t.nodeName.toLowerCase();if(t.className){const e=t.className.trim().split(/\s+/).slice(0,2);e.length>0&&e[0]&&(n+="."+e.join("."))}if(e.unshift(n),t=t.parentNode,e.length>3)break}return e.join(" > ")}getViewport(){return{width:window.innerWidth,height:window.innerHeight,devicePixelRatio:window.devicePixelRatio||1}}addEvent(t){t.sessionId=this.config.sessionId,this.events.push(t),this.events.length>=this.config.batchSize&&this.flush(),this.config.debug&&this.updateDebugInfo()}startFlushTimer(){this.flushTimer=setInterval(()=>{this.flush()},this.config.flushInterval)}flush(t=!1){if(0===this.events.length&&0===this.mousePositions.length)return;const e={events:[...this.events],mousePositions:[...this.mousePositions],sessionId:this.config.sessionId,timestamp:Date.now(),pageUrl:window.location.href,userAgent:navigator.userAgent};this.events=[],this.mousePositions=[],this.saveToLocalStorage(e),this.config.endpoint&&"/api/heatmap"!==this.config.endpoint&&this.sendData(e,t)}saveToLocalStorage(t){try{const e=localStorage.getItem(this.config.storageKey),n=e?JSON.parse(e):[];n.push(t);const o=n.slice(-100);localStorage.setItem(this.config.storageKey,JSON.stringify(o))}catch(t){console.error("Failed to save heatmap data:",t)}}loadExistingData(){try{const t=localStorage.getItem(this.config.storageKey);if(t){const e=JSON.parse(t);this.config.debug&&console.log(`Loaded ${e.length} batches of heatmap data`)}}catch(t){console.error("Failed to load heatmap data:",t)}}sendData(t,e=!1){const n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};e&&navigator.sendBeacon?navigator.sendBeacon(this.config.endpoint,JSON.stringify(t)):fetch(this.config.endpoint,n).catch(t=>{this.config.debug&&console.error("Failed to send heatmap data:",t)})}createDebugOverlay(){const t=document.createElement("div");t.className="heatmap-debug-overlay",t.innerHTML=`\n                <h4>Heatmap Debug</h4>\n                <table>\n                    <tr>\n                        <td>Session:</td>\n                        <td class="debug-session">${this.config.sessionId.substring(0,8)}...</td>\n                    </tr>\n                    <tr>\n                        <td>Events:</td>\n                        <td class="debug-events">0</td>\n                    </tr>\n                    <tr>\n                        <td>Mouse Points:</td>\n                        <td class="debug-mouse">0</td>\n                    </tr>\n                    <tr>\n                        <td>Last Event:</td>\n                        <td class="debug-last">None</td>\n                    </tr>\n                    <tr>\n                        <td>Viewport:</td>\n                        <td class="debug-viewport">${window.innerWidth}x${window.innerHeight}</td>\n                    </tr>\n                </table>\n            `,document.body.appendChild(t),this.debugOverlay=t}updateDebugInfo(){if(this.debugOverlay){if(this.debugOverlay.querySelector(".debug-events").textContent=this.events.length,this.debugOverlay.querySelector(".debug-mouse").textContent=this.mousePositions.length,this.events.length>0){const t=this.events[this.events.length-1];this.debugOverlay.querySelector(".debug-last").textContent=t.type}this.debugOverlay.querySelector(".debug-viewport").textContent=`${window.innerWidth}x${window.innerHeight}`}}showClickIndicator(t,e){const n=document.createElement("div");n.className="heatmap-click-indicator",n.style.left=t-10+"px",n.style.top=e-10+"px",document.body.appendChild(n),setTimeout(()=>{n.remove()},1e3)}updateScrollIndicator(){let t=document.querySelector(".heatmap-scroll-indicator");t||(t=document.createElement("div"),t.className="heatmap-scroll-indicator",document.body.appendChild(t));const e=window.pageYOffset/(document.documentElement.scrollHeight-window.innerHeight)*100,n=window.innerHeight/document.documentElement.scrollHeight*window.innerHeight,o=e/100*(window.innerHeight-n);t.style.height=n+"px",t.style.top=o+"px"}enable(){this.config.enabled=!0,this.init()}disable(){this.config.enabled=!1,this.flushTimer&&clearInterval(this.flushTimer),this.flush(!0)}getHeatmapData(){try{const t=localStorage.getItem(this.config.storageKey);return t?JSON.parse(t):[]}catch(t){return console.error("Failed to get heatmap data:",t),[]}}clearData(){localStorage.removeItem(this.config.storageKey),this.events=[],this.mousePositions=[]}}window.HeatmapTracker=t,window.heatmapConfig&&(window.heatmapInstance=new t(window.heatmapConfig))}();